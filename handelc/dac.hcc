#include "mixer.hch"
#include "vlab.hch"
#include "dac.hch"

#define DIVIDE_8K  6250
#define DIVIDE_11K 4532 // 4535.14739229   These have to be rounded to be multiples
#define DIVIDE_22K 2266 // 2267.573696145  of eachother, so that the audio is in
#define DIVIDE_44K 1133 // 1133.786848073  sync when they are mixed.

struct {
	unsigned 1  mode;
	unsigned 1  write;
	unsigned 12 buffer;
} dac_8k;

struct {
	unsigned 2  mode;
	unsigned 1  write;
	unsigned 12 buffer;
} dac_44k;

void dac_driver() {
    unsigned 8  i;
	unsigned 13 counter_8k;
	unsigned 13 counter_44k;
    
    unsigned 12 buffer;
    unsigned 1  output;
    
	sema dac_sema;
	
	par {
		// 8K clock
		while (1) {
			if (counter_8k == 0) {
				counter_8k = DIVIDE_8K;
			}
			else {
				counter_8k--;
			}
		}
		// 44K/22K/11K clock
		while (1) {	
			if (counter_44k == 0) {
				counter_44k = DIVIDE_44K << (0 @ (3 - dac_44k.mode));
			}
			else {
				counter_44k--;
			}
		}
        while (1) {
            if (output == 1) {
                dac_write_to_output(0xF, buffer);
                output = 0;
            }
            else {
                delay;
            }
        }
		// 8K output
		while (1) {
			if (dac_8k.mode) {
                if (dac_8k.write && counter_8k == 0) {
                    par {
                        buffer = mix(dac_8k.buffer, dac_44k.buffer);
                        output = 1;
                        dac_8k.write = 0;
                    }
                }
                else {
                    delay;
                }
			}
			else {
				dac_8k.buffer = 0;
			}
		}
		// 11K/22K/44K output
		while (1) {
			if (dac_44k.mode != 0) {
                if (dac_44k.write && counter_44k == 0) {
                    par {
                        buffer = mix(dac_8k.buffer, dac_44k.buffer);
                        output = 1;
                        dac_44k.write = 0;
                    }
                }
                else {
                    delay;
                }
			}
			else {
				dac_44k.buffer = 0;;
			}
		}
	}
}