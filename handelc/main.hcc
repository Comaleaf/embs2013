#include "vlab.hch"
#include "main.hch"

unsigned 32 numerator;

State state_print(unsigned char c) {
	// stop writing and reset state if c is 0
	if (c == 0) {
		return STATE_ACCEPT;
	}
	// otherwise write out
	else {
		uartwrite ! c;
		return STATE_PRINT;
	}
}

State state_in_d(unsigned 32 d) {
	unsigned 32 result;
    
	// do the division
	result = counting_division(numerator, d);

	// write to microblaze
	fslwrite ! result;
    
	// reset state
	return STATE_ACCEPT;
}

State state_in_n(unsigned 32 n) {
	// store the numerator
	numerator = n;
    
	// now accept the denominator
	return STATE_IN_D;
}

State state_accept(State new_state) {
	return new_state;
}

void main(void) {
	unsigned 32 datin;
	State state;
    
	initialise();
	state = STATE_ACCEPT;
	
	par {
		uart_driver();
		fsl_driver();
		while (1) {
			fslread ? datin;

			switch (state) {
				case STATE_ACCEPT: state = state_accept(datin <- 2); break;
				case STATE_PRINT:  state = state_print(datin <- 8);  break;
				case STATE_IN_N:   state = state_in_n(datin);        break;
				case STATE_IN_D:   state = state_in_d(datin);        break;
			}
		}
	}
}
