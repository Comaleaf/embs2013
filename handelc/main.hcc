#include "vlab.hch"
#include "fsl.hch"
#include "dac.hch"
#include "buffer.hch"
#include "main.hch"

void main(void) {	
	initialise();
	
	par {
		uart_driver();
		fsl_driver();
		dac_driver();
		buffer_driver();
		fsl_to_buffer_driver();
		buffer_to_dac_driver();
	}
}

void fsl_to_buffer_driver() {
	unsigned 32 fsl_data;
	
	unsigned 1 sample_width;
	unsigned 14 packet_length;
	signed 14 packet_offset;
	
	// Process data from FSL into buffer
    while (1) {
		fsl_read ? fsl_data;
		
		// Receive a new packet
		
		if (fsl_data[31]) { // Reset bit
			// Start buffer again from beginning
			par {
				cursor_write = 0;
				cursor_read = 0;
				buffer_used = 0;
				
				switch (fsl_data <- 2) {
					case RATE_8K:  dac_sample_rate = 6249; break;
					case RATE_11K: dac_sample_rate = 4534; break;
					case RATE_22K: dac_sample_rate = 2266; break;
					case RATE_44K: dac_sample_rate = 1133; break;
				}
			}
		}
		
		// Extract packet information from FSL word
		par {
			sample_width  = fsl_data[30];
			packet_offset = (signed) fsl_data[27:14];
			packet_length = fsl_data[13:0];
		}
		
		while (packet_length != 0) {
			// Get next samples from FSL
			par {
				fsl_read ? fsl_data;
				packet_length -= 4;
			}
			
			if (sample_width == WIDTH_8BIT) {
				// Can read 4 samples at a time from FSL bus with 8-bit samples
				buffer_write ! fsl_data[31:24] @ 0;
				buffer_write ! fsl_data[23:16] @ 0;
				buffer_write ! fsl_data[15:8] @ 0;
				buffer_write ! fsl_data[7:0] @ 0;
			}
			else {
				// Can read 2 samples at a time from FSL bus with 16-bit samples
				buffer_write ! fsl_data[31:21] @ ~fsl_data[20];
				buffer_write ! fsl_data[15:5] @ ~fsl_data[4];
			}
		}
	}
}

void buffer_to_dac_driver() {
	unsigned 12 pcm_word;
	
	// Consume buffer data and output on DAC
	while (1) {
		while (buffer_used < BUFFER_WIDTH-5) {delay;}
		while (buffer_used > 4) {
			buffer_read ? pcm_word;
			dac_write ! pcm_word;
		}
	}
}